<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite1_man</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>turn_speed = room_speed/2.5
atk_speed = room_speed/2
atk_cooldown = false
move_cooldown = false
key_log = ds_list_create()
atk_key_log = ds_list_create()
image_speed = .25
top_room = room
right_room = room
bottom_room = room
left_room = room
trans_dir = 0
globalvar old_room_surface;
old_room_surface = 10000
globalvar new_room_surface;
new_room_surface = 10000
room_start = -1
room_trans = room_speed
dd = false
mini_map = surface_create(5*8*4,6*5*4)
hp = 4
weapon_array = change_weapon(1)
s1 = surface_create(64,64)
for(var i=0;i&lt;4;i++)
{
room_history[i,0] = room
room_history[i,1] = x
room_history[i,2] = y
}
dest_index = 0
//event_perform(ev_other,ev_room_start)
alarm[11] = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !surface_exists(mini_map)
    mini_map = surface_create(5*8*4,6*5*4)
surface_set_target(mini_map)
draw_clear(c_gray)
for(var i = 1;i&lt;4;i++)
draw_rectangle_colour((room_history[i,0]-r1A )%5*8*4,floor((room_history[i,0]-r1A)/5)*5*4,4*((room_history[i,0]-r1A)%5*8+8),4*(floor((room_history[i,0] - r1A)/5)*5+5),c_green,c_green,c_green,c_green,false)
draw_rectangle_colour((room-r1A )%5*8*4,floor((room-r1A)/5)*5*4,4*((room-r1A)%5*8+8),4*(floor((room - r1A)/5)*5+5),c_yellow,c_yellow,c_yellow,c_yellow,false)
draw_set_colour(c_black)
for(var i = 8;i&lt;=5*8;i+=8)
draw_line(i*4,0,i*4,6*5*4)
for(var i = 5;i&lt;=6*5;i+=5)
draw_line(0,i*4,5*8*4,i*4)
surface_reset_target()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_activate_all()
room_start = 0
switch(trans_dir)
{
case 0:
    x = 64*15
break;
case 1:
    y = 64*9
    break;
case 2:
    x = 64*0
break;
case 3:
    y = 64*0
break;
}
dd = false
yprevious = y
xprevious = x
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>atk_cooldown = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_cooldown = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///key press checks
//move
if keyboard_check_pressed(ord("W")){
    update_key_log(1,0,key_log)
}else if keyboard_check_released(ord("W")){
    update_key_log(0,0,key_log)
}
if keyboard_check_pressed(ord("S")){
    update_key_log(1,1,key_log)
}else if keyboard_check_released(ord("S")){
    update_key_log(0,1,key_log)
}
if keyboard_check_pressed(ord("A")){
    update_key_log(1,2,key_log)
}else if keyboard_check_released(ord("A")){
    update_key_log(0,2,key_log)
}
if keyboard_check_pressed(ord("D")){
    update_key_log(1,3,key_log)
}else if keyboard_check_released(ord("D")){
    update_key_log(0,3,key_log)
}
//attack
if keyboard_check_pressed(vk_up){
    update_key_log(1,4,atk_key_log)
}else if keyboard_check_released(vk_up){
    update_key_log(0,4,atk_key_log)
}
if keyboard_check_pressed(vk_down){
    update_key_log(1,5,atk_key_log)
}else if keyboard_check_released(vk_down){
    update_key_log(0,5,atk_key_log)
}
if keyboard_check_pressed(vk_left){
    update_key_log(1,6,atk_key_log)
}else if keyboard_check_released(vk_left){
    update_key_log(0,6,atk_key_log)
}
if keyboard_check_pressed(vk_right){
    update_key_log(1,7,atk_key_log)
}else if keyboard_check_released(vk_right){
    update_key_log(0,7,atk_key_log)
}

randomize()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
for(var i = 1;i&lt;4;i++)
if mouse_check_button_pressed(mb_left) and mouse_x &gt; (room_history[i,0]-r1A )%5*8*4 + room_width - surface_get_width(mini_map) and mouse_y &gt; room_height - surface_get_height(mini_map) + floor((room_history[i,0]-r1A)/5)*5*4 and mouse_x &lt; 4*((room_history[i,0]-r1A)%5*8+8) + room_width - surface_get_width(mini_map) and mouse_y &lt; room_height - surface_get_height(mini_map) + 4*(floor((room_history[i,0] - r1A)/5)*5+5)
{
room_start = -1
dest_index = i
room_goto(room_history[i,0])
dd=true
}

if move_cooldown = false and ds_list_size(key_log) &gt; 0 and room_start &lt;= 0 and dd = false
{
    switch(ds_list_find_value(key_log, ds_list_size(key_log)-1))
    {
    case 0:
        y-=64;
    break;
    case 1:
        y+=64;
    break;
    case 2:
        x-=64;
    break;
    case 3:
        x+=64;
    break;
    }    
    if ds_grid_get(grid_map,x/64,y/64) != 0
    {
        y = yprevious
        x = xprevious
    }
    else if x &lt; 0
    {
        //room_goto(left_room)
        trans_dir = 0
        dd = true
    }
    else if y &lt; 0
    {
        //room_goto(top_room)
        trans_dir = 1
        dd = true
    }
    else if x &gt;= 64*16
    {
        //room_goto(right_room)
        trans_dir = 2
        dd = true
    }
    else if y &gt;= 64*10 
    {
        //room_goto(bottom_room)
        trans_dir = 3
        dd = true
    }
    else
    {
        if x != xprevious or y != yprevious
        {
            ds_grid_set(grid_map,xprevious/64,yprevious/64,0)
            ds_grid_set(grid_map,x/64,y/64,id)
        }
        move_cooldown = true
        alarm[0] = turn_speed
    }
}
if atk_cooldown = false and ds_list_size(atk_key_log) &gt; 0
{
    switch(ds_list_find_value(atk_key_log, ds_list_size(atk_key_log)-1))
    {
    case 4:
    for(var i = 1; i&lt;=weapon_array[0];i++)
        instance_create(x,y - 64*weapon_array[i],oAttackParticle)
    break;
    case 5:
    for(var i = 1; i&lt;=weapon_array[0];i++)
        instance_create(x,y + 64*weapon_array[i],oAttackParticle)
    break;
    case 6:
    for(var i = 1; i&lt;=weapon_array[0];i++)
        instance_create(x - 64*weapon_array[i],y,oAttackParticle)
    break;
    case 7:
    for(var i = 1; i&lt;=weapon_array[0];i++)
        instance_create(x + 64*weapon_array[i],y,oAttackParticle)
    }
    atk_cooldown = true
    alarm[1] = atk_speed
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weapon_array = change_weapon(3)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weapon_array = change_weapon(2)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weapon_array = change_weapon(1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_free(old_room_surface)
old_room_surface = surface_create(1024,640)
surface_set_target(old_room_surface)
draw_surface(application_surface,0,0)
surface_reset_target()
if room_start = -1
{
    dd = false
    x=room_history[dest_index-1,1]
    y=room_history[dest_index-1,2]
}
var temp_array;
for(var i=0;i&lt;4;i++)
{
    temp_array[i,1] = room_history[i,1]
    temp_array[i,2] = room_history[i,2]
}
for(var i=1;i&lt;4;i++)
{
    room_history[i,1] = temp_array[i-1,1]
    room_history[i,2] = temp_array[i-1,2]
}
room_history[0,1] = xprevious
room_history[0,2] = yprevious
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room_start = 0
room_start=1
else
room_start = 0
for(var i=0;i&lt;4;i++)
    if room_history[i,0] = room
        with(oEnemy)
            instance_destroy()

var temp_array;
for(var i=0;i&lt;4;i++)
{
    temp_array[i,0] = room_history[i,0]
}
for(var i=1;i&lt;4;i++)
{
    room_history[i,0] = temp_array[i-1,0]
}
room_history[0,0] = room
if !surface_exists(mini_map)
    mini_map = surface_create(5*8*4,6*5*4)
surface_set_target(mini_map)
draw_clear(c_gray)
for(var i = 1;i&lt;4;i++)
draw_rectangle_colour((room_history[i,0]-r1A )%5*8*4,floor((room_history[i,0]-r1A)/5)*5*4,4*((room_history[i,0]-r1A)%5*8+8),4*(floor((room_history[i,0] - r1A)/5)*5+5),c_green,c_green,c_green,c_green,false)
draw_rectangle_colour((room-r1A )%5*8*4,floor((room-r1A)/5)*5*4,4*((room-r1A)%5*8+8),4*(floor((room - r1A)/5)*5+5),c_yellow,c_yellow,c_yellow,c_yellow,false)
draw_set_colour(c_black)
for(var i = 8;i&lt;=5*8;i+=8)
draw_line(i*4,0,i*4,6*5*4)
for(var i = 5;i&lt;=6*5;i+=5)
draw_line(0,i*4,5*8*4,i*4)
surface_reset_target()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if dd = true and room_start = 0
{
switch(trans_dir)
    {
    case 0:
room_goto(room - 1)
    break;
    case 1:
room_goto(room - 5)
    break;
    case 2:
room_goto(room + 1)
    break
    case 3:
room_goto(room + 5)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room_start &gt; 0
{
    if room_start = 1
    {
        room_start = 2
        alarm[2] = room_trans
        surface_free(new_room_surface)
        new_room_surface = surface_create(1024,640)
        surface_set_target(new_room_surface)
        draw_surface(application_surface,0,0)
        surface_reset_target()
        instance_deactivate_all(true)
    }
    var xx = 0
    var yy = 0
    var yyy = 0
    var xxx = 0
    var px
    var py
    switch(trans_dir)
    {
    case 0:
        xx = ( (room_trans - alarm[2]) / room_trans) * 1024
        xxx = ( (room_trans - alarm[2]) / room_trans) * 1024 - 1024
        var px = xx - (room_trans - alarm[2]) / room_trans * 64
        var py = y
    break;
    case 1:
        yy = ( (room_trans - alarm[2]) / room_trans) * 640
        yyy = ( (room_trans - alarm[2]) / room_trans) * 640 - 640
        var px = x
        var py = yy - (room_trans - alarm[2]) / room_trans * 64
    break;
    case 2:
        xx = ( (alarm[2]) / room_trans) * 1024 - 1024
        xxx = ( (alarm[2]) / room_trans) * 1024
        var px = xxx + (room_trans - alarm[2]) / room_trans * 64 - 64
        var py = y
    break
    case 3:
        yy = ( (alarm[2]) / room_trans) * 640 - 640
        yyy = ( (alarm[2]) / room_trans) * 640
        var px = x
        var py = yyy + (room_trans - alarm[2]) / room_trans * 64 - 64
    }
     if surface_exists(new_room_surface)
            draw_surface(new_room_surface, xxx, yyy)
     if surface_exists(old_room_surface)
            draw_surface(old_room_surface,xx, yy)
     draw_sprite_ext(sprite_index,image_index,px,py,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
}
if surface_exists(mini_map)
    draw_surface(mini_map,room_width - surface_get_width(mini_map),room_height - surface_get_height(mini_map))
    
for(var i = 0; i &lt; hp; i++)
{
    draw_sprite(sprite9_bestsprite,0,70+i*70, room_height - 100)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room_start = 0 and dd = false
{
    if !surface_exists(s1)
        s1 = surface_create(64,64)
    surface_set_target(s1)
    draw_clear_alpha(c_white,0)
    if atk_cooldown =true
    {
        //this code draws the sprite at the current x and y position of the instance
        
        var i, steps, xx, yy, u, v, radius, amount, tex;
        tex = sprite_get_texture(sAttackPossibility,0)
        radius = 64
        amount = (alarm[1]-atk_speed)/atk_speed*360
        steps = 20; //this value sets the precision of the circle (the larger the more precise)
        
        draw_set_color(c_white);
        draw_primitive_begin_texture(pr_trianglefan,tex);
        draw_vertex_texture(radius/2,radius/2,0.5,0.5);
        for(i = 0; i &lt;= steps; i += 1)
        {
          xx = radius + lengthdir_x(radius, 90+ amount * i / steps);
          yy = radius + lengthdir_y(radius, 90+ amount * i / steps);  
          u = xx/(radius*2);
          v = yy/(radius*2);
          draw_vertex_texture(xx-radius/2,yy-radius/2,u,v);
        }
        draw_primitive_end();
    }
    else
        draw_sprite(sAttackPossibility,0,0,0)
    surface_reset_target()
    draw_set_alpha(.2)
    for(var i = 1; i&lt;=weapon_array[0];i++)
        if ds_grid_get(grid_map,x/64,(y+64*weapon_array[i])/64) != -1
            draw_surface(s1,x,y+64*weapon_array[i])
    for(var i = 1; i&lt;=weapon_array[0];i++)
        if ds_grid_get(grid_map,x/64,(y-64*weapon_array[i])/64) != -1
            draw_surface(s1,x,y-64*weapon_array[i])
    for(var i = 1; i&lt;=weapon_array[0];i++)
        if ds_grid_get(grid_map,(x+64*weapon_array[i])/64,y/64) != -1
            draw_surface(s1,x+64*weapon_array[i],y)
    for(var i = 1; i&lt;=weapon_array[0];i++)
        if ds_grid_get(grid_map,(x-64*weapon_array[i])/64,y/64) != -1
            draw_surface(s1,x-64*weapon_array[i],y)
    draw_set_alpha(1)
    draw_self()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
